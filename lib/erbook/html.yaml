desc: web page for the Internet

code: |
  # load the String#to_xhtml and String#to_inline_xhtml methods
  require 'erbook/to_xhtml'
  class String
    # Transforms this UTF-8 string into XML entities.
    def to_xml_entities
      unpack('U*').map! {|c| "&##{c};"}.join
    end
    # Transforms this string into a valid URI fragment.
    # See http://www.nmt.edu/tcc/help/pubs/xhtml/id-type.html
    def to_uri_fragment
      # remove XML tags from the input
      buf = gsub(/<.*?>/, '')
      # The first or only character must be a letter.
      buf.insert(0, 'a') unless buf[0,1] =~ /[[:alpha:]]/
      # The remaining characters must be letters, digits, hyphens (-),
      # underscores (_), colons (:), or periods (.) or Unicode characters
      buf.unpack('U*').map! do |code|
        if code > 0xFF or code.chr =~ /[[:alnum:]\-_:\.]/
          code
        else
          32 # ASCII character code for a single space
        end
      end.pack('U*').strip.gsub(/[[:space:]-]+/, '-')
    end
  end
  class Hash
    # Transforms this hash into a string of XML attribute key="value" pairs.
    def to_xml_atts
      inject([]) {|s,(k,v)| s << %( #{k}="#{v}") }.join
    end
  end
  module ERBook
    class Template
      # Protects the given content from the text-to-XHTML conversion process.
      def verbatim content
        ERB::Util.html_escape content
      end

      # Returns XHTML for a hyperlink to the given
      # URL of the given label and mouse-hover title.
      def hyperlink url, label = url, title = nil
        %{<a href="#{url}"#{%{ title="#{title}"} if title}>#{label}</a>}
      end

      # Returns an <img/> tag that embeds the given image file.
      #
      # path::    path to the image file
      # format::  format of the image file (e.g. PNG, JPEG, GIF, etc.)
      # atts::    additional attributes for the <img> tag
      #
      def embed_image_file path, format = path[/\w+/], atts = {}
        data = ERBook.base_64_encode File.read(path)
        embed_image_data data, format, atts
      end
      # Returns an <img/> tag that embeds the given raw image data.
      #
      # data::    raw image data
      # format::  format of the image file (e.g. PNG, JPEG, GIF, etc.)
      # atts::    additional attributes for the <img> tag
      #
      def embed_image_data data, format, atts = {}
        atts[:src] = ERBook.base_64_embed_image_data(data, format)
        "<img#{atts.to_xml_atts}/>"
      end
    end
    class Document::Node
      # Returns the user-defined title for this node's content.
      def title
        @title ||= args[0]
      end
      # Returns the user-defined indentifer for this node.
      def id
        @id ||= args[1]
      end
      ##
      # utility methods
      #
      def type_label #:nodoc:
        type.to_s.capitalize
      end
      # Returns the title of this node as XHTML.
      def title_xhtml
        title.to_s.to_inline_xhtml
      end
      def figure_html
        imgf ||= args[2]
        imgf ||= "#{id.to_s}.jpg"
        "<img src=\"#{imgf}\" alt=\"Angry face\"/>"
      end
      def self.type_title type
        case type
        when 'section'
          "節"
        when 'table'
          "表"
        when 'figure'
          "圖"
        when 'example'
          "例"
        when 'code'
          "程式碼"
        when 'equation'
          "等式"
        else
          type.to_s.capitalize
        end
      end
      def type_title
        ERBook::Document::Node.type_title type
      end
      def ref_title
        case type
        when 'section' 
          "#{type_title}#{index}"
        when 'figure','example', 'equation', 'table', 'code'
          "#{type_title}#{number}"
        end
      end
      def full_title
        "#{ref_title}.&nbsp;&nbsp;#{title}"
      end
      # Returns the content of this node as XHTML.
      def content_xhtml
        content.to_s.to_xhtml
      end
      # Returns the content of this node as XHTML inside a <div/>.
      def content_xhtml_div #:nodoc:
        %{<div class="content">#{content_xhtml}</div>}
      end
      # Returns a hyperlink to this node containing its title.
      def title_link title = nil
        title || title_xhtml
      end
      # Returns a hyperlink to this node
      # containing its LaTeX-style index number.
      def index_link
        index
      end
      # Returns a hyperlink to this node containing its occurrence number.
      def number_link
        [type_label, number].compact.join(' ')
      end
      # Returns a hyperlink to this node containing
      # its ocurrence number and its title.
      def number_and_title_link #:nodoc:
        "#{number_link}.&nbsp;&nbsp;#{title_link}"
      end
      # Returns a hyperlink to this node containing
      # its LaTeX-style index number and its title.
      def index_and_title_link #:nodoc:
        "#{index_link}&nbsp;&nbsp;#{title_link}"
      end
      LIST_SIGN = '&equiv;'  # identical to
      HERE_SIGN = '&#x25CE;' # bullseye
      PREV_SIGN = '&#x25B3;' # white up-pointing triangle
      NEXT_SIGN = '&#x25BD;' # white down-pointing triangle
      # Calculates a local navigation menu containing links
      # to the given URI fragments (which can be nil).
      def self.navigation here_frag, list_frag, prev_frag, next_frag
        list_link = list_frag ? %{<a title="Reverse jump to listing" href="##{list_frag}">#{LIST_SIGN}</a>} : LIST_SIGN

        here_link = here_frag ? %{<a title="Jump to this segment" href="##{here_frag}">#{HERE_SIGN}</a>} : HERE_SIGN

        prev_link = prev_frag ? %{<a title="Jump to previous segment" href="##{prev_frag}">#{PREV_SIGN}</a>} : PREV_SIGN

        next_link = next_frag ? %{<a title="Jump to next segment" href="##{next_frag}">#{NEXT_SIGN}</a>} : NEXT_SIGN

        %{<a name="#{here_frag}"/><div class="nav" id="#{here_frag}">#{list_link}#{prev_link}#{next_link}#{here_link}</div>}
      end
      # Returns a hyperlink to this node.
      #
      # @param [String] label
      #   Optional label (may contain XHTML) for the hyperlink.
      #
      #   If not specified, the title and designation of
      #   this node will be used as the label instead.
      #
      def xref_link
        %{<a class="xref" href="##{here_frag}"#{
          %( title="#{ERB::Util.h title}")
        }>#{ref_title}</a>}
      end
      ##
      # URI fragments
      #
      @@frags = []
      # Returns a unique URI fragment for this node.
      def here_frag #:nodoc:
        unless defined? @here_frag
          salt = object_id.abs
          frag = (id || title || salt).to_s.to_uri_fragment

          # make it unique
          while @@frags.include? frag
            frag << '-' << (index || number || salt).to_s
          end

          @@frags << frag
          @here_frag = frag
        end

        @here_frag
      end
      # Returns the URI fragment for the location in the table
      # of contents / list of figures that points this node.
      def list_frag #:nodoc:
        @list_frag ||= "rev:#{here_frag}"
      end
    end
    # Encodes the given input in base64 format.
    def ERBook.base_64_encode input #:nodoc:
      [input].pack('m')
    end
    # Returns a string denoting embedded, base64 encoded data.
    def ERBook.base_64_embed data, format #:nodoc:
      "data:#{format.to_s.downcase};base64,#{data.tr("\n", '')}"
    end
    # Returns a string denoting embedded, base64 encoded image data.
    #
    # format:: format of the image data (e.g. PNG, JPEG, GIF, etc.)
    #
    def ERBook.base_64_embed_image_data data, format #:nodoc:
      base_64_embed data, "image/#{format}"
    end
    ##
    # admonition icons
    #
    ICONS_DIR = File.join(ERBook::FORMATS_DIR, 'xhtml.icons')
    ICON_DEFS = YAML.load_file File.join(ICONS_DIR, 'index.yaml')
    Icon = Struct.new(:origin, :path, :name, :format, :data)
    class Icon #:nodoc:
      # Returns a data URI containing embedded image data.
      def data_uri
        ERBook.base_64_embed_image_data self.data, self.format
      end

      # Returns a CSS url() containing embedded image data.
      def data_css
        %{url("#{data_uri}")}
      end
      # Returns a XML entity reference (to this icon's
      # embedded image data) ready for insertion into XML.
      def entity_xml
        "&#{entity_name};"
      end
      # Returns the name of the XML entity whose
      # value contains embedded image data.
      def entity_name
        "icon_#{name}"
      end
      # Returns an <img/> tag that renders the image
      # data embedded as an ENTITY in the html DOCTYPE.
      def to_xhtml atts = {}
        atts[:alt] ||= name
        atts[:src] = entity_xml
        atts[:class] = :icon
        "<img#{atts.to_xml_atts}/>"
      end
    end

    ICON_BY_NAME = {}

    ICON_DEFS.each_pair do |name, path|
      format = File.extname(path).sub('.', '')
      origin = path[/^\w+/]

      path = File.join(ICONS_DIR, path) # make the path absolute
      data = base_64_encode File.open(path, 'rb') {|f| f.read }

      ICON_BY_NAME[name] = Icon.new(origin, path, name, format, data)
    end

    ICONS = ICON_BY_NAME.values
  end


nodes:
  # object model
    node:
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: false
      inline: true
      output: <%= @node.content_xhtml %>

  # Structure
    header: &header
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: true
      inline: true
      output: <%= @node.content_xhtml %>

    header_outside_above: &header_insert
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: true
      inline: true
      output: <div class="<%= @node.type %>"><%= @node.content_xhtml %></div>

    header_inside_above:  *header_insert
    header_inside_below:  *header_insert
    header_outside_below: *header_insert

    footer:               *header
    footer_outside_above: *header_insert
    footer_inside_above:  *header_insert
    footer_inside_below:  *header_insert
    footer_outside_below: *header_insert

    abstract:
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: true
      output: |
        <div id="<%= @node.type_label %>">
          <h1 class="title"><%= @node.type_label %></h1>
          <%= @node.content_xhtml_div %>
        </div>

  # Organization
    part: &latex
      toc: true
      lof: false
      depth: true
      index: true
      number: true
      silent: false
      output: |
        <div class="<%= @node.type %>">
          <h1 class="title">
            <%= @node.type_label %>&nbsp;<%= @node.index_link %>
            <br/>
            <big><%= @node.title_link %></big>
          </h1>
          <%= @node.content_xhtml_div %>
        </div>

    chapter: *latex

    section: 
      toc: true
      lof: false
      depth: true
      index: true
      number: true
      silent: false
      output: |
        <% depth = [6, @node.depth + 1].min %>
        <%if depth == 1 %>
          <%=@format['adsense']%>
        <%end%>
        <div class="<%= @node.type %>">
          <h<%= depth %> id="<%=@node.here_frag%>" class="title">
            <%= @node.full_title %>
          </h<%= depth %>>
          <%= @node.content_xhtml_div %>
        </div>

    paragraph:
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: false
      output: |
        <div class="<%= @node.type %>">
          <p class="title"><%= @node.title_link %></p>
          <%= @node.content_xhtml_div %>
        </div>

  # Admonitions
    tip: &admonition
      toc: false
      lof: true
      depth: true
      index: false
      number: true
      silent: false
      output: |
        <div class="<%= @node.type %>">
          <p class="title"><%= @node.number_and_title_link %></p>
          <div class="content">
            <%= ICON_BY_NAME[@node.type].to_xhtml %>
            <%= @node.content_xhtml %>
          </div>
        </div>

    note: *admonition
    caution: *admonition
    warning: *admonition
    important: *admonition

  # Auxilary materials (formal blocks)
  # see http://www.sagehill.net/docbookxsl/FormalTitles.html
    figure: 
      toc: false
      lof: true
      depth: true
      index: false
      number: true
      silent: false
      output: |
        <div class="<%=@node.type%>">
          <p id="<%=@node.here_frag%>" class="title"><%=@node.full_title%></p>
          <%=@node.figure_html%>
        </div>

    table: &formal
      toc: false
      lof: true
      depth: true
      index: false
      number: true
      silent: false
      output: |
        <div class="<%= @node.type %>">
          <%= @node.navigation %>
          <p id="<%=@node.here_frag%>" class="title"><%=@node.full_title%></p>
          <%=@node.content_xhtml_div%>
        </div>

    example: *formal
    equation: *formal
    procedure: *formal

    code: &formal
      toc: false
      lof: true
      depth: true
      index: false
      number: true
      silent: false
      output: |
        <div class="<%= @node.type %>">
          <p id="<%=@node.here_frag%>" class="title"><%=@node.full_title%></p>
          <%="<code>\n#{@node.content}</code>\n".to_xhtml%>
        </div>
  # cross-references
    xref:
      toc: false
      lof: false
      depth: true
      index: false
      number: false
      silent: false
      inline: true
      output: |
        <%=
          query, label = @node.args
          scope = @nodes
          target = scope.find {|n| n.id == query } || # id has 1st priority
                   scope.find {|n| n.title == query }
          if target
            target.xref_link
          else
            raise ArgumentError, "invalid cross-reference to #{@node.title.inspect}", @node.trace
          end
        %>

  # Bibliography
    reference:
      toc: false
      lof: false
      depth: false
      index: false
      number: true
      silent: true
      inline: true

    cite:
      toc: false
      lof: false
      depth: false
      index: false
      number: false
      silent: false
      inline: true
      output: |
        <%=
          target = @nodes_by_type['reference'].find {|n| n.title == @node.args[0]}

          if target
            '<sup>[%s]</sup>' % [

              '<a class="%s" href="#%s">%s</a>' % [
                @node.type,
                target.here_frag,
                target.number
              ],

              *@node.args[1..-1]

            ].join(', ')
          else
            raise ArgumentError, "invalid citation for #{@node.title.inspect}", @node.trace
          end
        %>

output: |
  <%
    # set default parameter values
    $title    = '$title' unless defined? $title
    $subtitle = '$subtitle' unless defined? $subtitle
    $authors  = {'$authors' => nil} unless defined? $authors
    $date     = Time.now.strftime("%Y%m%d") unless defined? $date
    abstract = @nodes_by_type['abstract'].first
    references = @nodes_by_type['reference']
    if references.empty?
      references = nil
    end
    # compute table of contents
      toc_builder = lambda do |n|
        nested = n.children.inject('') {|s,c| s << toc_builder[c] }
        nested = nil if nested.empty?

        if n.defn['toc']
          entry = '%s<a id="%s" href="#%s">%s</a>' % [
            (n.index.to_s + '&nbsp;&nbsp;' if n.index),
            n.list_frag,
            n.here_frag,
            n.title.to_s.to_inline_xhtml
          ]

          %{<li>#{entry}#{"<ul>#{nested}</ul>" if nested}</li>}
        else
          nested
        end.to_s
      end

      toc = @roots.inject('') {|s,n| s << toc_builder[n] }

    # compute list of figures
      lof_enums = {} # type => nodes

      @format['nodes'].each_pair do |name, info|
        if info['lof']
          nodes = @nodes_by_type[name]
          lof_enums[name] = nodes unless nodes.empty?
        end
      end

      lof_sections = []

      lof = lof_enums.sort.map do |type, nodes|
        nested = nodes.map do |n|
          %{<li><a id="#{n.list_frag}" href="##{n.here_frag}">#{n.title.to_s.to_inline_xhtml}</a></li>}
        end
        label = ERBook::Document::Node.type_title type
        lof_sections << label
        %{<h2 class="title">#{label}</h2> <ol>#{nested}</ol>}
      end
  %>
  <html>
    <head>
      <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
      <meta name="generator" content="<%= ERBook::DISPLAY %>"/>
      <% if $title %>
        <title><%= $title.to_s.to_inline_xhtml %></title>
      <% end %>
      <% if $authors %>
        <meta name="author" content="<%= $authors.keys.join(', ') %>"/>
      <% end %>
      <%if $date%>
        <meta name="date" content="<%= $date %>"/>
      <%end%>
      <% @format['styles'].each do |style| %>
        <% style.each_pair do |media, code| %>
          <style type="text/css" media="<%= media %>">
          <![CDATA[<%= ERB.new(code).result(binding) %>]]>
          </style>
        <% end %>
      <% end %>
    </head>
    <body>
    <div id="body">
      <%= node = @nodes_by_type['header_outside_above'].first and node.output %>
      <div id="header">
      <%= node = @nodes_by_type['header_inside_above'].first and node.output %>
      <% if header = @nodes_by_type['header'].first %>
        <%= header.output %>
      <% else %>
        <% if $title %>
          <h1 class="title"><%= $title.to_s.to_inline_xhtml %></h1>
        <% end %>
        <%if $subtitle%>
          <h2 class="subtitle"><%= $subtitle.to_s.to_inline_xhtml %></h2>
        <%end%>
        <%if $authors%>
          <h3 class="authors"><%=
            $authors.map do |name, url|
              if url
                %{<a href="#{url}">#{name}</a>}
              else
                name
              end
            end.join(', ')
          %></h3>
        <% end %>
      <%end%>
      <%=@format['adsense']%>
      <%=node = @nodes_by_type['header_inside_below'].first and node.output %>
      </div>
      <%=node = @nodes_by_type['header_outside_below'].first and node.output %>
      <%= abstract.output if abstract %>
      <% unless toc.empty? %>
        <div id="toc">
          <h1 class="title">目錄</h1>
          <ul>
            <%= toc %>

            <% if references %>
            <li><a id="rev:References" href="#References">References</a></li>
            <% end %>
          </ul>
        </div>
      <% end %>

      <% unless lof.empty? %>
        <div id="lof"><%= lof %></div>
      <% end %>

      <div id="content"><%= @content %></div>

      <% if references %>
      <div id="bib">
        <h1 class="title" >References</h1>
        <ol>
        <% references.each do |n| %>
          <li id="<%= n.here_frag %>"><%= n.content_xhtml %></li>
        <% end %>
        </ol>
      </div>
      <% end %>
      <%if $date%>
        <h3 class="date">最近修改日期：<%=$date%></h3>
      <%end%>

      <%=@format['analytics']%>
    </div>
    </body>
  </html>

analytics: |
  <script type="text/javascript">
  var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
  document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script>
  <script type="text/javascript">
  try {
  var pageTracker = _gat._getTracker("UA-8405318-2");
  pageTracker._trackPageview();
  } catch(err) {}</script>

adsense: |
  <script type="text/javascript"><!--
  google_ad_client = "pub-7516968926110807";
  /* 728x90, created 7/11/09 */
  google_ad_slot = "6383692460";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
  </script>
  <script type="text/javascript"
  src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
  </script>

# definition of font families for use in the CSS styles
fonts:
  serif:      Constantia, "Book Antiqua", "URW Bookman L", serif
  sans-serif: Calibri, Verdana, sans-serif
  monospace:  Monaco, Consolas, "Lucida Console", monospace

styles:
- all: |
- screen: |
- print: |
