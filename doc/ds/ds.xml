<?xml version="1.0" encoding="big5"?>
<!--<!DOCTYPE DocBook>-->
<!DOCTYPE book 
[
<!ENTITY array SYSTEM "array.chapter.xml">
<!ENTITY linkedList SYSTEM "linkedList.chapter.xml">
<!ENTITY stack SYSTEM "stack.chapter.xml">
<!ENTITY queue SYSTEM "queue.chapter.xml">
<!ENTITY hash SYSTEM "hash.chapter.xml">
<!ENTITY tree SYSTEM "tree.chapter.xml">
<!ENTITY heap SYSTEM "heap.chapter.xml">
<!ENTITY graph SYSTEM "graph.chapter.xml">
<!ENTITY advanceTree SYSTEM "advanceTree.chapter.xml">
<!ENTITY % MATHML.prefixed "INCLUDE">
<!ENTITY % MATHML.prefix "mml">
<!ENTITY % equation.content "(alt?, (graphic+|mediaobject+|mml:math))">
<!ENTITY % inlineequation.content 
                "(alt?, (graphic+|inlinemediaobject+|mml:math))">
<!ENTITY % mathml PUBLIC "-//W3C//DTD MathML 2.0//EN"
        "http://www.w3.org/TR/MathML2/dtd/mathml2.dtd">
%mathml;
]>
<book><title>資料結構</title>
<preface>
本書組織，每一章描述一種抽象結構，包含下面的元素。
<itemizedlist>
<listitem>定義
	<itemizedlist>
		<listitem>結構定義
	    <itemizedlist>
		    <listitem>結構組成元素</listitem>
		    <listitem>結構上的操作</listitem>
	    </itemizedlist>
		</listitem>
    <listitem>使用建構程序定義</listitem>
		<listitem>以限制式定義</listitem>
	</itemizedlist>
</listitem>

<listitem>結構可能實作，此節可省略</listitem>
<listitem>結構的相關應用</listitem>
<listitem>習題</listitem>
</itemizedlist>
</preface>
<part><title>基礎資料結構</title>
<chapter><title>抽象資料型態 ADT</title>
<sect1 hclass="definition"><title>抽象資料型態 ADT</title>
<para>
一組資料值集合和作用於集合上操作的序對，
此序對<emphasis>獨立於任何實作</emphasis>。
因此任何僅使用此序對的操作，及資料值的客戶程式，
在<emphasis>抽換此序對底層的實作並不會影響客戶程式，
換句話說，客戶程式不需要改寫任何程式碼</emphasis>，
這稱為<emphasis>抽象型態獨立性</emphasis>，
由此可知抽象資料型態<emphasis>為客戶層隱藏了實作的細節</emphasis>，
讓客戶層能用更為簡易的方式操作資料。
</para>
<para>
從以下的應用，
可以歸納出<emphasis>模型</emphasis>包含一組抽象資料型態。
</para>
<sect2 hclass="application"><title>資料庫模型的抽象化</title>
<para>
關於上述抽象資料型態一個有趣應用便是<emphasis>資料庫模型</emphasis>的抽象化，
一般資料庫設計者會把資料庫模型依抽象程序由低而高分成三層，
<emphasis>實體層</emphasis>、
<emphasis>邏輯層</emphasis>及<emphasis>概念層</emphasis>。
</para>
<para>
實體層上的操作主要負責將資料<emphasis>持久化於硬體上</emphasis>。
</para>
<para>
概念層上的主要提供一組更為簡易的抽象資料型態，及相關的操作，
讓資料庫管理師能簡便的查詢、插入、更新及定義資料庫儲存的資料，
像主流的<emphasis>關連式模型</emphasis>，
便包含一組威力強大的抽象資料型態。
</para>
<para>
概念層上的提供更為簡易的資料型態，
僅讓使用者能操作其業務上所必要的資料，
目前主流的是<emphasis>實體關係模型</emphasis>。
</para>
</sect2>
<sect2 hclass="application"><title>網路模型的抽象化</title>
<para>
網路也藉由將網路的問題抽象出來，
讓設計者更能專注問題本身的設計。
</para>
<para>
例如 TCP/IP 模型<emphasis>網路層</emphasis>提供上層模型，
能簡單的以<emphasis>IP 位址</emphasis>來表示資料要傳遞到那一台主機上，
而不必指出資料要透過那些機制，或經過那些主機來到達目的主機，
所以 TCP/IP 模型包含四組抽象資料型態，
用來描述網路行為。
</para>
</sect2>
</sect1>
<sect1><title>定義抽象資料型態的方法</title>
<sect2><title>使用資料值組及操作序對定義</title>
</sect2>
<sect2><title>使用建構程序定義</title>
<para>
例如<xref linkend="HuffmanTree"/>。
</para>
</sect2>
<sect2><title>以限制式定義</title>
<para>
例如<xref linkend="AVLTree"/>。
</para>
</sect2>
</sect1>
</chapter>
&array;
&linkedList;
&stack;
&queue;
&tree;
&heap;
&graph;
&hash;
</part>
<part><title>高等資料結構</title>
&advanceTree;
</part>
</book>
