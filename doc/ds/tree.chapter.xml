<?xml version="1.0" encoding="big5"?>
<chapter><title>樹狀結構</title>
<sect1><title>樹 tree</title>
<para>
<emphasis>樹</emphasis>可遞迴定義如下：
<itemizedlist>
<listitem>基本定義：
<para>
單一節點 r 為樹，其自身為根 root。
</para>
</listitem>
<listitem>建構定義：
<para>
令 r 為單一節點，若有樹集合 T<subscript>s</subscript>={
t<subscript>1</subscript>, 
t<subscript>2</subscript>...
t<subscript>n</subscript>}，
對所有 t 屬於 T<subscript>s</subscript> 
建立一個邊連至 r 形成 r'，
則 r' 仍為樹。
</para>
</listitem>
</itemizedlist>
</para>
<para>
r' 稱為 t 的<emphasis>父 parent</emphasis>，
而 t 稱為 r' 為<emphasis>子 child</emphasis>，
r 稱為樹 r' 的根。
{t<subscript>1</subscript>, 
t<subscript>2</subscript>...
t<subscript>n</subscript>}的根，稱為<emphasis>兄弟 silbling</emphasis>。
</para>
<para>
若 t 沒有子節點，稱 t 為<emphasis>葉 leaf</emphasis>。
</para>
<para>
由定義可知根為樹中沒有父的節點。
</para>
<sect2><title>叉 degree</title>
<para>
<emphasis>叉</emphasis>為一函數，若 n 為樹 T 之節點，
d(n) 定義為 n 的子節點數目。
</para>
<para>
<emphasis>序樹 ordered tree</emphasis>指樹的子節點具有一定的順序。
</para>
<para>
定義 d(T)=max(d(n)), n 屬於 T，
若 d(T)=m, m 為自然數，
稱 T 為<emphasis>m-叉樹</emphasis>。
</para>
<para>
若所有 n 屬於 m-叉樹 T，且 d(n)=0 or m，則 T 為
<emphasis>滿樹 full tree</emphasis>。
</para>
<para>
1-叉樹為一種退化成鏈結的樹，其每個節點最多只有一個子，
又稱為<emphasis>藤蔓 vine	</emphasis>
</para>
</sect2>
<sect2><title>高 height</title>
<para>
<emphasis>高</emphasis>為一函數，若 n 為樹 T 之節點，
h(n) 定義為由根 r 至 n 的路徑所連接的節點數。
由上可知 h(r)=1。
</para>
<para>
定義 h(T)=max(h(n)), n 屬於 T，稱 h 為 T 的<emphasis>樹高</emphasis>。
</para>
<para>
<emphasis>平衡樹	balanced tree</emphasis>
為每個葉子都等高的樹。
</para>
</sect2>
<sect2><title>完全樹 complete tree</title>
若 T 既是滿樹，也是平衡樹，則稱為<emphasis>完全樹</emphasis>。
</sect2>
<sect2><title>陣列表示法</title>
</sect2>
<sect2><title>鏈結表示法</title>
</sect2>
<sect2><title>樹定理</title>
<para>
以下的陳述相互邏輯等價
<itemizedlist>
<listitem>T 為無環且連通圖</listitem>
<listitem>T 任兩個點之間，存在唯一的路徑</listitem>
<listitem>T 為最大連通，且 v=e-1 這同義於若 e in T, 則 T-e 不連通。</listitem>
<listitem>T 為最小無環，且 v=e-1，這同義於若 e not in T, 則 T+e 為有環圖。</listitem>
</itemizedlist>	
</para>
</sect2>
</sect1>
<sect1><title>二元樹</title>
<para>
*二元樹的定義	
	二元樹是由一群節點所組成，每個節點最多連結兩個子節點。
	其子節點區分為左子節點及右子節點。
	由圖論來理解，二元樹是無環連通圖，其度數最大為二，其中
	有個特別的節點定義為根；其連接的子節點有作左右區分。
	node=(left(node),right(node)).
	*完全二元樹的節點數為 2^h-1	
	此為判斷完全二元樹的指標之一。
	*樹高與節點數的關係 h=log(n+1,2)	
	此關係指出二元搜尋樹接近完全樹，則搜尋鍵值時間可壓縮成
	對數時間。O(n)=log(n)
	*左子右弟 left child, right sibling	
	此法可將任何樹狀結構以二元樹表示
</para>
<sect2><title>為何要使用樹狀結構？</title>
	*樹狀結構可把線性資料用階層組織表達	
	*搜尋時間與樹高成比例，而非與資料長度成比例		
	*若樹成平衡樹，則樹高與資料量 n 成對樹關係	
</sect2>

<sect2><title>二元樹任兩個節點之間，存在唯一的路徑</title>
	這可由樹定理推得。
</sect2>

<sect2><title>算式樹 expression tree</title>
<sect3><title>滿足問題 satisfication problem</title>
</sect3>
</sect2>
<sect2><title>決策樹 decision tree</title>
<sect3><title>八幣問題 eight coins problem</title>
</sect3>
</sect2>
<sect2><title>遊戲樹 game tree</title>
</sect2>
<sect2><title>樹的尋訪 Travel tree</title>
<para>
<equation>Tra(tree):tree->sequence</equation>
<emphasis>尋訪</emphasis>是輸入一樹，
並傳回一序列包含所有的節點的函數。
簡單說就是把樹作線性排序。
</para>
<para>
一般說來尋訪包含三個步驟：輸出節點、訪問左子樹、訪問右子樹，
其中輸出節點通常為將節點值加入至結果序列中，
訪問左子樹為向左子樹移動，
訪問右子樹為向右子樹移動，
令 P 表輸出節點的步驟、L 表訪問左子樹、R 表訪問右子樹，
則有輸出的順序會有下面的組合：
<equation>T={PLR,LPR,LRP,PRL,RPL,RLP}</equation>
</para>
<para>
通常會先拜訪左子樹，再拜訪右子樹，
而命名是來自於輸出的序列與數學公式<emphasis>前序記號</emphasis>、
<emphasis>中序記號</emphasis>及<emphasis>後序記號</emphasis>字串一樣而來，
有下面三種：
<itemizedlist>
<listitem>前序 preorder - PLR，輸出節點在訪問子樹前</listitem>
<listitem>中序 inorder - LPR，輸出節點在訪問子樹中</listitem>
<listitem>後序 postorder - LRP，輸出節點在訪問子樹後</listitem>
</itemizedlist>
若是調換左右子樹的訪問順序，則稱為
<emphasis>反序尋訪 reverse order</emphasis>，
列舉如下：
<itemizedlist>
	<listitem>反前序	reverse preorder - PRL</listitem>
	<listitem>反中序	reverse inorder - RPL</listitem>
	<listitem>反後序	reverse postorder - RLP</listitem>
</itemizedlist>
	*圖3.2.2.a	

		2
	       / \
 	      7   5  
             / \   \
	    2  6    9
              / \   /
  	     5  11  4
	其尋訪序列為：
	前序：2  7  2  6  5  11 5  9  4
	中序：2  7  5  6  11 2  5  4  9 
	後序：2  5  11 6  7  4  9  5  2 	
</para>
<sect3><title>與 DFS 的關係</title>
<para>
DFS 先探訪離起點最遠的節點，在樹的情況中，
DFS 的實作不用額外記憶尋訪過的節點，
由 3.2.1 得知樹中每不同兩點間僅有唯一的路徑，
故不可能經由不同路徑探訪至探訪過的節點。
以上樹的尋訪均是 DFS 的特例，其中前序最接近一般的 DFS。
</para>
</sect3>
<sect3><title>階層尋訪 Level order 與 BFS </title>
<para>
二元樹的階層尋訪便為 BFS 的特例。
</para>
</sect3>
</sect2>
<sect2><title>引線樹 threaded tree</title>
</sect2>
<sect2><title>二元樹表示集合</title>
</sect2>
<sect2><title>二元樹表示樹及森林</title>
</sect2>
<sect2><title>用前序及中序序列建立唯一二元樹</title>
</sect2>

<sect2><title>二元搜尋樹</title>
	二元搜尋樹是一二元樹，但左子節點值均小於節點值，右子
	節點值均大於節點值。
	*圖 3.2.3.a	
		 7
               /  \
              3   10
 	     / \    \
	    1   6   14
               / \  /
  	      4  7 13
	*利用中序尋訪將樹化為漸增序列	
	上圖為一二元搜尋樹，其 inorder traversal 為：
	1 3 4 6 7 7 10 13 14
	**反序利用反向中序尋訪	
	把節點轉為漸增序列，若用 reverse inorder 則轉為漸減數
	列。
	*搜尋	
	搜尋節點步驟為：
	比較節點值與鍵值，若鍵值小於節點值則往左子樹探訪，若
	大於則往右子樹探訪，若等於則傳回此節點。
	
	*再平衡	reblance	
	若加入或刪除節點，而改變了樹的結構，則必需用再平衡來
	使樹維持平衡。
	
	*平衡法則 balance rule	
	平衡法則是樹用來再平衡的判定及動作。常見的有 AVL 樹及
	紅黑樹。
</sect2>
	
<sect2><title>樹的調整</title>
	*旋轉	rotation
	*圖3.2.4.a	
	
		|     	|
		Y	X
	       / \     / \
	      X   c&lt;=>a	  Y
	     / \	 / \
	    a   b	b   c
	
	節點：大寫字母 X, Y
	子樹：小寫字母 a, b, c
	旋轉定義如上圖，由左圖至右圖的轉變稱作右旋，其反向轉變稱
	作左旋。
	*旋轉會改變節點的高度，但不會改變其中序巡訪的順序	
	*旋轉僅會改變節點及其子樹的結構，不會更動到母樹	
	這些特性使旋轉成為二元樹用來調整平衡結構的標準動作

</sect2>
</sect1>
</chapter>
