<%section '呼叫動態共用函式庫的函數' do %>
<%paragraph do%>
現代的作業系統都提供動態連結函式庫(DLL Dynamic LinkLibrary)
讓程序呼叫可執行程式碼中部分的函式。
DLL 是扮演共用程式庫功能的可執行檔，
裡面包含一個或多個已編譯、連結的函式，
並且儲存在與呼叫它們的程序不同的地方。
DLL 可以讓多個應用程式可以同時存取記憶體中 DLL 單一複本的內容，
<%end%>
<%paragraph do%>
動態連結與靜態連結的不同處在於，
動態連結的可執行模組只包含在執行階段時用來找出 DLL 函式可執行程式碼的資訊。
但靜態連結的可執行檔包含所有參考函式的程式碼。
<%end%>
<%paragraph do%>
動態連結可提供許多優點像是節省記憶體、節省磁碟空間、
較容易升級、提供擴充程式庫機制。
<%end%>
<%paragraph do%>
在 Ruby 程式中可以透過 Ruby/DL 來呼叫 DLL 內的函式，
Ruby/DL 用 DL::Handle 來表示要使用的 DLL，
DLL 內的函式則用 DL::Symbol 物件表示，
由於 DLL 內沒有函式引數的定義，
所以必須在 DL::Symbol 中指定 DLL 函數所有引數資料類型代碼。
<%end%>
<%table '資料類型代碼表', 'type_specifiers' do%>
<table>
<tr>
<th>代碼</th><th>對應的 C 類型</th>
</tr>
<tr>
<td>C</td><td>char</td>
</tr>
<tr>
<td>c</td><td>char*</td>
</tr>
<tr>
<td>H</td><td>short</td>
</tr>
<tr>
<td>h</td><td>short*</td>
</tr>
<tr>
<td>I</td><td>int</td>
</tr>
<tr>
<td>i</td><td>int*</td>
</tr>
<tr>
<td>L</td><td>long</td>
</tr>
<tr>
<td>l</td><td>long*</td>
</tr>
<tr>
<td>f</td><td>float</td>
</tr>
<tr>
<td>F</td><td>float*</td>
</tr>
<tr>
<td>D</td><td>double</td>
</tr>
<tr>
<td>d</td><td>double*</td>
</tr>
<tr>
<td>S</td><td>const char*</td>
</tr>
<tr>
<td>s</td><td>char*</td>
</tr>
<tr>
<td>A</td><td>const type[]</td>
</tr>
<tr>
<td>a</td><td>type[]</td>
</tr>
<tr>
<td>P</td><td>void*</td>
</tr>
<tr>
<td>p</td><td>void*</td>
</tr>
<tr>
<td>0</td><td>void function()</td>
</tr>
</table>
<%end%>
<%code 'dll.h', 'dll.h', 'c' do %>
<%# include dlex/dll.h #%>
<%end%>
<%code 'dll.c', 'dll.c', 'c' do %>
<%# include dlex/dll.c #%>
<%end%>
<%paragraph do%>
<%=xref 'dll.h'%>及<%=xref 'dll.c'%>定義一個範例 dll，
裡頭定義一個稱為 node 的 struct 資料型態來實作單向連結串列，
也定義一個函數 <notextile>init_list</notextile> 會接受一個整數引數 num，
並依照 num 的數值，製作出小於等於 num 的遞降數字連結串列，
如 <notextile>init_list(3)</notextile> 便會傳回
<notextile>-</notextile>&gt;3<notextile>-</notextile>&gt;2<notextile>-</notextile>&gt;1
的連結串列。
<%end%>
<%code '<nospan>test_dll.c</nospan>', 'test_dll.c', 'c' do %>
<%# include dlex/test_dll.c #%>
<%end%>
<%code '<nospan>test_dll.rb</nospan>', 'test_dll.rb', 'ruby' do %>
<%# include dlex/test_dll.rb #%>
<%end%>
<%paragraph do%>
<%=xref 'test_dll.rb'%>簡單說明 DL 模組應用，
首先要建立一個 DL::Handle 物件來表示要使用的 DLL，
我們使用 DL.dlopen 'dll.dll' 來建立 DL::Handle 物件，
此方法接受一個定義 dll 的檔案路徑作為參數，
上例為建立一個路徑為 dll.dll 的 DLL。
<%end%>
<%paragraph do%>
之後我們用 DL::Handle#[] 方法來取得表示 DLL 函數的 DL::Symbol 物件，
如 <nospan>init_list = dllex['init_list', 'PI']</nospan>
便會建立表示 <nospan>init_list</nospan> 函數的 
DL::Symbol 物件並設給 ruby 的 <nospan>init_list</nospan> 變數，
此方法第一個引數為 DLL 函數的名稱，
第二個字串參數指定 DLL 函數所有引數資料類型字串，
字串的第一個字元指定回傳參數，如上面回傳參數為 P，
對照 <%=xref 'type_specifiers'%> 得知 P 表示回傳參數為一個指標，
第二個後的字元依序表示傳入的參數，上例為 I 表示傳入一個 int 的整數。
<%end%>
<%paragraph do%>
建立 DL::Symbol 物件後，便能用 call 方法來呼叫此函數，
call 方法可以接受用引數資料類型字串定義的參數串，
如上例我們傳一個整數給 <nospan>init_list</nospan>，
執行完會會傳回一個二元素陣列[r, rs]，
r 為資料類型字串所定義的回傳參數，
rs 為傳入引數，
若我們引數類型字串是 i 則表示傳給函數的引數類型為
<nospan>int*</nospan>，
表示此函數會修改傳入的引數，並把修改完後的丟給上述回傳的 rs 中，
我們便能存取 C 函數修改的指標引數。
<%end%>
<%paragraph do%>
DL 用 DL::PtrData 物件來表示 C 指標變數，
像上述的<nospan>init_list</nospan>
<%end%>
<%end%>
