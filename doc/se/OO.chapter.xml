<?xml version="1.0" encoding="big5"?>
<chapter><title>物件導向</title>
<sect1><title>為何要以物件導向開發</title>
<para>
傳統軟體系統的困難，
<itemizedlist>
<listitem>應變能力差</listitem>
<listitem>系統的發展是階段性的</listitem>
<listitem>系統需求和規格的改變是傳統軟體發展最無法應變的</listitem>
<listitem>軟體的維護比重新開發還難</listitem>
</itemizedlist>
</para>
<para>
傳統軟體工程裡所使用的由上而下結構式的軟體開發方式，
以及依這種開發方式所發展出來的程式設計語言並無法滿足要這麼做所需具備的可重用性
、可擴展性、與可維護性的模組封裝需求。
</para>
<para>
物件導向的開發也支援軟工良好模組化的特色，資訊隱藏、資料抽象化和封裝。
在一個物件內部所進行任何的修改是被隔離在局部，
因此物件導向開發的軟體就易於修改、擴充和維護。
</para>
<para>
物件導向的開發鼓勵重覆使用，不僅軟體的重覆使用，
還包括分析、設計的模型的重覆使用。
</para>
<para>
物件比函數更穩定；軟體需求的變動往往是功能相關的變動，
而其功能的執行者----物件----通常不會有大的變動。
</para>
<para>
心理學的研究也表明，把客觀世界看成是許多物件，
將更接近人類的自然思維方式。
因為物件與真實世界有一個很直接的關係，
不需要做任何的轉換就可以讓我們更易於所理解。
</para>
</sect1>
<sect1><title>程序導向設計 VS 物件導向設計</title>
<para>
程序導向設計發展系統時，考慮如下：
<itemizedlist>
<listitem>軟體系統的發展方式是考慮此系統所要完成的『功能』甚麼？</listitem>
<listitem>要完成這樣的功能需要採取哪些『動作』?</listitem>
<listitem>這些動作需要循著怎樣的『程序』來進行?</listitem>
<listitem>系統的架構是建立在所要處理的功能上，根據功能來劃分系統裡的各個模組。</listitem>
</itemizedlist>
物件導向設計發展系統時，考慮如下：
<itemizedlist>
<listitem>以系統所要處理的『物件』或是『資料』作為考慮系統架構的出發點。</listitem>
<listitem>先從抽象的層面來分析要處理『類別』(class)的資料?</listitem>
<listitem>各種類別的資料會以哪些『方法』(method) 來操作?</listitem>
<listitem>整個系統是以各個封裝良好的物件模組架構起來的，
	每一個物件模組就是一個類別定義，它包含有一組私有的資料結構，
	以及開放給外界用來操作這組資料的一群方法。</listitem>
</itemizedlist>
</para>
</sect1>
<sect1><title>物件導向的精確定義</title>
<para>
設計時，不要先問系統要作到什麼功能；
先問有哪些東西可以讓系統做到這些功能！
就是以模組化為基本精神，
以封裝、繼承、與動態繫結為原則，
以產生具有可重用性、可維護性、
以及可擴展性這些一良好品質的軟體系統所採取的軟體發展方式。
</para>
</sect1>
</chapter>
