<%section '復原管理' do%>
% section '日誌項目' do
% paragraph do
未完成交易指已啟動但未交付的交易，
系統當機表示 RAM 中所有資料流失，
這也指未完成交易的暫存狀態也流失。
而我們若不能確定那幾筆更動已寫入到磁碟，
則會造成磁碟中持久資料可能會產生不一致，
進而違反 ACID 原則，
而當機是不可預知的，
所以便使用日誌檔來達到當機復原的功能。
日誌檔(log)是另外一份寫在磁碟的資料，
其資料能在系統當機時，可以用來回復資料庫的狀態，
通用的日誌項目如下：
* [START T]：表示交易 T 啟動
* [COMMIT T]：表示交易 T 已交付
* [ABORT T]：表示交易 T 已取消
% end
% paragraph do
日誌機制又分成三種，取消日誌、重作日誌和復原重作日誌。
% end
% end
% section '重作日誌' do
% paragraph do
重作日誌是當機時，重作未全部完成的動作，
其多定義了一個日誌項目如下：
% end
% paragraph do
[T,X,v]：表示交易 T 改變資料項目 X ，其新值為 v
% end 
% section '重作日誌資料項目存入磁碟的順序' do
% paragraph do
存入[T,X,v]
% end
% paragraph do
存入[COMMIT T]
% end
% paragraph do
存入資料項目 X
% end
% end
如<%=xref "RedoDataStoreOrd"%>所示，
重作日誌系統在存入資料項目前，
一定先存入日誌項目，
此原則稱為日誌先存原則(WAL,write-ahead
logging)。
% paragraph do
'重作日誌的當機復原程序' 
% end
% paragraph do
由下而上讀取日誌項目，並重覆以下的判斷程序
% paragraph do
若讀到 [COMMIT T] 則標誌 T 為已交付
% end
% paragraph do
若讀到 [T,X,v]，且 T 為已交付，則將 v 存入 X 的磁碟位置
% end
% end
% end
% paragraph do讀取最後一筆後，對每個未完成交易 Ta 存入[ABORT Ta]% end
% end
% end
% end
% section '重作日誌使用動態檢核點' do
% paragraph do
重作日誌資料項目存入磁碟的順序
% end
% paragraph do
存入[START CKPT T1T2...Tn]
% end
% paragraph do
正常程序
% end
% paragraph do
等 T1T2...Tn 交易完成後，存入 [END CKPT]
% end
% paragraph do
其當機復原程序如下：
% end
% paragraph do
由下而上讀取日誌項目，並重覆以下的判斷程序
% end
% paragraph do
若讀到 [END CKPT]，
表示對應的 [START CKPT T...]以前開始的交易，
除了 T... 都已確實交付了，
故持續重作標示交付的交易，
直到讀到 [START Ti]，
再插入必要的 [ABORT T]，便復原完成
% end
% paragraph do
若讀到 [START CKPT T...]，
則找到上個 [END CKPT]，再執行<%=xref "redo_end_ckpt"%>
% end
% paragraph do
執行重作日誌的當機復原程序
% end
% end
<%end%>
