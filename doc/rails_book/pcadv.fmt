# Copyright 2007 Suraj N. Kurapati
# See the file named LICENSE for details.

desc: web page for the Internet

code: |
  # load the String#to_html method
  require 'gerbil/html'
  require 'hpricot'
  require 'lib/wordscript'

  class String
    # Transforms this UTF-8 string into HTML entities.
    def to_html_entities
      unpack('U*').map! {|c| "&##{c};"}.join
    end
    
    def no_html_entities
      gsub '&lt;', '<'
    end

    # Transforms this string into a valid URI fragment.
    # See http://www.nmt.edu/tcc/help/pubs/xhtml/id-type.html
    def to_uri_fragment
      # remove HTML tags from the input
      buf = gsub(/<.*?>/, '')

      # The first or only character must be a letter.
      buf.insert(0, 'a') unless buf[0,1] =~ /[[:alpha:]]/

      # The remaining characters must be letters, digits, hyphens (-),
      # underscores (_), colons (:), or periods (.) or Unicode characters
      buf.unpack('U*').map! do |code|
        if code > 0xFF or code.chr =~ /[[:alnum:]\-_:\.]/
          code
        else
          32 # ASCII character code for a single space
        end
      end.pack('U*').strip.gsub(/[[:space:]-]+/, '-')
    end
  end

  class Hash
    # Transforms this hash into a string of HTML attribute key=value pairs.
    def to_html_atts
      inject([]) {|s,(k,v)| s << %( #{k}="#{v}") }.join
    end
  end

  class Node
    # Returns the user-defined title for this node's content.
    def title
      @title ||= args[0]
    end

    # Returns the user-defined indentifer for this node.
    def id
      @id ||= args[1]
    end

    def lang
      @lang ||= args[2]
    end

    @@frags = []

    # Returns a unique URI fragment for this node.
    def url
      unless defined? @url
        frag = (id || title || object_id).to_s.to_uri_fragment
        frag << frag.object_id.to_s while @@frags.include? frag # make it unique

        @@frags << frag
        @url = frag
      end

      @url
    end

    # Returns the URI fragment for the location in the table
    # of contents / list of figures that points this node.
    def list_url
      @list_url ||= trace.object_id.to_s.to_uri_fragment
    end
  end

  # Returns a hyperlink to the given URL of
  # the given name and mouse-hover title.
  def link aUrl, aName = aUrl, aTitle = nil
    %{<a href="#{h aUrl}"#{%{ title="#{aTitle}"} if aTitle}>#{aName}</a>}
  end

  # Encodes the given input in base64 format.
  def encode_base_64 aInput
    [aInput].pack('m')
  end

  # Returns a HTML <img> tag that embeds the given image data.
  #
  # aData:: raw image image data in base64 encoding
  # aFormat:: format of the image data (e.g. PNG, JPG, GIF, etc.)
  # aAttrs:: additional attributes for the <img> tag
  #
  def embed_image_data aData, aFormat, aAtts = {}
    aAtts['src'] = "data:image/#{aFormat};base64,#{aData}"
    "<img#{aAtts.to_html_atts}/>"
  end

  # Returns a HTML <img> tag that embeds the given image file.
  #
  # aPath:: path to the image file
  # aFormat:: format of the image data (e.g. PNG, JPG, GIF, etc.)
  # aAttrs:: additional attributes for the <img> tag
  #
  def embed_image_file aPath, aFormat = aPath[/\w+$/], aAttrs = {}
    data = encode_base_64 File.read(aPath)
    embed_image_data data, aFormat, aAttrs
  end

  # load admonition icons
    Icon = Struct.new(:path, :name, :format, :data)

    class Icon
      # Returns the CSS class for this icon.
      def css_class
        @css_class ||= "icon-#{name}"
      end
    end

    ICONS = {}

    Dir[File.join(Gerbil[:format_home], 'html.icons', '*.*')].each do |path|
      ext = File.extname(path)
      name = File.basename(path, ext)
      data = encode_base_64 File.read(path)

      ICONS[name] = Icon.new(path, name, ext.sub('.', ''), data)
    end


nodes:
  ##
  # Structure
  chapter: 
    output: |
      selection.typeParagraph
      selection.font.bold = true
      selection.font.size = 20
      selection.typeText ic.iconv("@小標：<%=@node.title%>")

      selection.typeParagraph
      selection.font.bold = false
      selection.font.size = 12
      selection.typeText ic.iconv("@內文：")
      <%=@node.content%>

  section: 
    output: |
      selection.typeParagraph
      selection.font.bold = true
      selection.font.size = 14
      selection.typeText ic.iconv("@小小標：<%=@node.title%>")

      selection.typeParagraph
      selection.font.bold = false
      selection.font.size = 12
      selection.typeText ic.iconv("@內文：")
      <%=@node.content%>
   
  paragraph:
    output: |
      #selection.typeParagraph
      content = <<-EOS
      <%=@node.content.no_html_entities.gsub "\n", ""%>
      EOS
      selection.typeText ic.iconv(content)
      <%="\n"%>

  figure:
    number: true
    output: |
      src = 'd:/moneylog/public/rails_book/<%=
        doc = Hpricot.parse @node.content  
        (doc/'img')[0]['src']
      %>'
      selection.typeParagraph
      selection.InlineShapes.AddPicture 'FileName' => 
        src.gsub('/','\\'), 'LinkToFile'=>false, 
        'SaveWithDocument'=>true
      selection.typeParagraph
      selection.typeText ic.iconv("@圖<%=@node.number%>：<%=@node.title%>")
      selection.typeParagraph
      <%="\n"%>

  table:
    number: true
    output: |
      selection.typeParagraph
      selection.typeText ic.iconv("@表<%=@node.number%>：<%=@node.title%>")
      selection.typeParagraph
      <%=Html2Wordscript.table @node.content%>
      selection.endkey "Unit" => WdStory
      <%="\n"%>

  code:
    number: true
    output: |
      selection.typeParagraph
      selection.typeText ic.iconv("@程式碼<%=@node.number%>：<%=@node.title%>")
      selection.typeParagraph
      code = <<-'EOS'
      <%=@node.content.no_html_entities%>
      EOS
      selection.typeText ic.iconv(code)
      <%="\n"%>
      
  xref:
    output: |
      <%=
        scope = @nodes.select {|n| n.content}

        target = scope.find {|n| n.id == @node.args[0]} || # id has 1st priority
                 scope.find {|n| n.title == @node.args[0]}
        if target
          case target.type
          when 'table'
            "表#{target.number}"
          when 'figure'
            "圖#{target.number}"
          when 'code'
            "程式碼#{target.number}"
          end
        else
          raise ArgumentError, "invalid cross-reference to #{@node.title.inspect}", @node.trace
        end
      %>

output: |
  <%=@spec['prefix']%>
  selection.typeText ic.iconv("@欄目：")
  selection.typeParagraph
  selection.typeText ic.iconv("@檔名：<%=$file%>")
  selection.typeParagraph
  selection.font.size = 24
  selection.font.bold = true
  selection.typeText ic.iconv("@主標：<%=$title%>")
  selection.typeParagraph
  selection.font.size = 20
  selection.typeText ic.iconv("@副標：<%=$subtitle%>")

  selection.typeParagraph
  selection.font.size = 12
  selection.font.bold = false
  selection.typeText ic.iconv("@文：")
  5.times do 
    selection.typeParagraph
  end
  selection.typeText ic.iconv("@內文：")
  <%=@content%>
  word.activedocument.saveas "FileName" => 'd:\\moneylog\\public\\rails_book\\doc\\<%=$file%>'

prefix: |
  require "win32ole" 
  require 'iconv'  
  module WordConst
  end 
  ic = Iconv.new("big5", "utf-8")  
  begin 
    word = WIN32OLE.connect("word.application") 
  rescue 
    word = WIN32OLE.new("word.application") 
    word.documents.add 
  end 
  WIN32OLE.const_load word, WordConst
  include WordConst
  selection = word.selection
  doc = word.activeDocument
  word.visible = true 

  selection.font.namefareast          = ic.iconv("標楷體")
  selection.font.nameascii            = "Times New Roman"
