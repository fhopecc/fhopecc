<%section "MVC" do%>
<%paragraph do%>
Rails 架構採取目前主流的 MVC(Model-View-Controller) 架構，
它將軟體系統分成三個基本部份，分別為「資料模型」、「視圖」和「控制器」，
並訂定各個基本部分應有的功能，
最早由 Trygve Reenskaug 提出，被應用在 SmallTalk-80 環境中，
其目的是實現一種動態的程式設計，簡化程式的複雜度，
並使程序結構更加直觀，使簡化程式的後續修改和擴展，
並且使程式碼得以重複利用。
<%end%>
<%paragraph do%>
「資料模型」封裝與應用程序業務邏輯相關的資料以及對資料的處理方法。
「資料模型」有對資料直接訪問的權利，例如對資料庫的訪問，
當然不只是資料庫，也許可以是加密的檔案或資料夾，
可以看之後的計數器範例。
「資料模型」不依賴「視圖」和「控制器」，不關心它會被如何顯示或是被操作。
但是模型中資料的變化會利用「事件趨動模式」讓視圖知道資料變化，
觀察者模式要求監視此模型的視圖必須事先在此模型上註冊，
視圖才能了解在資料模型上發生的改變。
<%end%>
<%paragraph do%>
「視圖」負責顯示資料，資料異動時，視圖必須更新，
視圖更新一般不是循序邏輯趨動，
而是由事件趨動所觸發，
為了實現「視圖」上的刷新功能，
「視圖」需要訪問它監視的「資料模型」，因此應該事先在被它監視的「資料模型」那裡註冊。
<%end%>
<%paragraph do %>
「控制器」組織不同元件，並控制應用程序的流程。
它處理事件並作出回應。
「事件」包括用戶的行為和資料模型上的改變。
<%end%>
<%paragraph do %>
若將系統切割成 MVC，則人員可以通過自身的專長分組：

* i控制器，程序員編寫程序應有的功能，實現演算法
* i視圖，界面設計人員進行圖形界面設計
* i模型，資料庫專家進行資料管理和資料庫設計
<%end%>
<%paragraph do %>
Rails 架構中「資料模型」與「視圖」的溝通並非事件模式，
而是由「控制器」來控制整個流程。
以下我們會用 3 個例子，來觀察 Rails 的 MVC 是如何運作，
第 1 個例子顯示 Rails 沒有「資料模型」，只要有「控制器」就可以運作；
第 2 個例子顯示 Rails 中「資料模型」不一定要繼承 ActiveRecord，
任何東西都可以是「資料模型」，這個例子的資料模型是 File。
第 3 個例子就是標準的 Rails 架構，利用 ActiveRecord 來與資料庫溝通，
並傳回給視圖。
<%end%>
<%# include hello_rails.erb #%>
<%# include counter.erb #%>
<%# include monthly_mlog.erb #%>
<%end%>
