<%paragraph do%>
Rails 在網站開發的領域上相當火熱，
主要作者 DHH（David Heinemeier Hansson）更被 Google 和 O'Reilly 
選為 2005 年度駭客，但在尚未在台灣成為氣候。
像進行機關某個系統招標時，
只有 10 家 ASP.NET、2 家 JAVA 和 1 家 PHP 廠商打電話詢問。
這麼好的東西居然並未在台灣流行，
原因有很多，但我想中文文件的缺乏是其中一個重要原因，
雖然網路上有很多高手的部落格都有提到 Rails，
但這些內容通常是高手的備忘錄，大部份是片面的文章，
相當不容易讓初學者理解，
語言障礙讓很多台灣的程式師少了認識這個好東西的機會。
<%end%>
<%paragraph do%>
Rails 架構採取目前主流的 MVC 架構，
MVC 分別代表模型、視圖和控制器的縮寫，
最早由 Trygve Reenskaug 提出，被應用在 SmallTalk-80 環境中。
其目的是實現一種動態的程式設計，使簡化程式的後續修改和擴展，
並且使程式碼得以重複利用。
<%end%>
<%paragraph do%>
感謝 Matz 發明這麼好的語言，
讓 Rails 可以應用 Ruby 的動態、高度自省的本質，
使很怕麻煩的程式師 DHH，Rails 框架的建立者，
將 DRY，Dont Repeat Yourself，「不要重覆自已」原則加上，
COC，Convention over Configuration，「慣例優於設定檔」原則，
注入了整個 Rails 框架中。
<%end%>
<%paragraph do%>
DRY「不要重覆自已」原則，簡言之就是相同的程式碼不要寫兩遍，
這結合相當多的技巧，基本上你如果跟我一樣懶惰的話，
應該會愛上這個設計概念。
<%end%>
<%paragraph do%>
COC「慣例優於設定檔」原則，就是不要事事都要用設定檔來設定系統的行為，
而是把最常用的行為，就是慣例變成系統的預設行為。
這樣一來，程式師脫離一堆 XML 設定檔的苦海中，
忘卻 ASP.NET、J2EE 所帶來的惡夢。
<%end%>
<%paragraph do%>
當妳部份腦細胞塞滿了 MVC, DRY 及 COC 等古怪縮寫後，
本系列文章將介紹新 Rails 的特色，REST。 
這個字眼在目前 Web 開發者的世界可是相當火熱，
網路一堆人討論是否 REST 可望取代 SOA 或是 Webservice 等架構，
而 REST 風格是 Rails 2 的主要特徵，
DHH 還把 RoR 從 Ruby On Rails 改成 Resource On Rails 的縮寫，
可見 REST 在 Rails 2 中所佔的地位。
REST 對 Rails 最重要的改變在路由功能，
所以 Rails 2 的路由系統有些許了解後，
文章再介紹 REST 的抽象架構，大家會比較進入狀況。
<%end%>
<%paragraph do%>
這系列文章會以一個記帳網站為例，逐步帶領大家進入 Rails 2 的世界。
網站是麻雀雖小，但五臟俱全，
諸如帳號的申請及認證、網站架構的設計、資料庫的設計、
網頁版面設計及表單設計等等都會以 Rails 的觀點來切入。
雖然是我的學習心得，但還算完整的篇幅，
期待能讓讀者能依照此篇文章，作出一個 Rails 2.0 式的網站。
除了賺些稿費養老婆小孩，重點是用 Rails 的人越多，
形成網路效應，讓用 Rails 的人有更多的案子可接。
<%end%>
